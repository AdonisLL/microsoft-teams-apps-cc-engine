name: Deploy CC App

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   # Allows you to run this workflow remotley from GitHub API 
  repository_dispatch:
    types: [deploy-api]
    inputs:
        # Change this value
        UPDATE_APIM_API:
          description: 'Boolean to update APIM API (YES,NO)'
          required: true
          default: 'YES'

# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# 1. Set up the following secrets in your repository:
#   AZURE_WEBAPP_PUBLISH_PROFILE
#
# 2. Change these variables for your configuration:
env:
  DOTNET_VERSION: '3.1.x'           # set this to the dot net version to use
  WEBSITE_NAME: ''                  # this is going to be filed by querying the web apps in the resource group

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:

      # Checkout the repo
      - uses: actions/checkout@v3
      
      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 
      

         # Run dotnet restore
      - name: dotnet restore test 1
        run: |
          ls

       # Run dotnet restore
      - name: dotnet restore test 2
        run: |
          cd Source/CompanyCommunicator
          ls

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # - name: Cache dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.npm
      #     key: npm-${{ hashFiles('package-lock.json') }}
      #     restore-keys: npm-

      - name: Install dependencies
        run: |
          npm ci 
          npm run build --if-present
        working-directory: "./Source/CompanyCommunicator/ClientApp"
        #--ignore-scripts

      # Run dotnet restore
      - name: dotnet restore
        run: |
          dotnet restore "./Source/CompanyCommunicator/Microsoft.Teams.Apps.CompanyCommunicator.csproj"

      # Run dotnet build 
      - name: dotnet build 
        run: |
          dotnet build "./Source/CompanyCommunicator/Microsoft.Teams.Apps.CompanyCommunicator.csproj" --configuration Release

      # Run dotnet publish
      - name: dotnet publish
        run: |
          dotnet publish "./Source/CompanyCommunicator/Microsoft.Teams.Apps.CompanyCommunicator.csproj" -c Release -o './ccapp'
        #working-directory: "./source/companycommunicator/Microsoft.Teams.Apps.CompanyCommunicator.csproj"

      # Azure Login
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Get the web app name
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            echo "WEBSITE_NAME="$(awk -F'.' '{gsub("\"", "", $1); print $1}' <<< $(az webapp list -g ${{ secrets.AZURE_RG }} --query [0].defaultHostName)) >> $GITHUB_ENV
      
      # # Get the APIM name
      # - name: Azure CLI script
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.30.0
      #     inlineScript: |
      #       echo "APIM_NAME="$(awk -F'.' '{gsub("\"", "", $1); print $1}' <<< $(az apim list -g ${{ secrets.AZURE_RG }} --query [0].name)) >> $GITHUB_ENV
      
      # Deploy to Azure Web apps
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.WEBSITE_NAME }} # Replace with your app name
          package: './Source/CompanyCommunicator/ccapp'


      # # Deploy Bicep file
      # - name: 'deploy using env vars'
      #   id: 'deployInfra'
      #   uses: azure/arm-deploy@v1
      #   with:
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
      #     resourceGroupName: ${{ secrets.AZURE_RG }}
      #     template: ./infra/bicep/apim-schema.bicep
      #     parameters: 
      #       appName=${{ env.WEBSITE_NAME }}
      #       apimServiceName=${{ env.APIM_NAME }}
      #     failOnStdErr: false
